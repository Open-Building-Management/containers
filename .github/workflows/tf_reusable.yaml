name: tflite_reusable

on:
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: 'ubuntu version'
        required: true
        type: string
        default: '22.04'
      numpy:
        description: 'numpy version'
        required: true
        type: string
        default: '1.26.4'
      tflite:
        description: 'tflite version'
        required: true
        type: string
        default: '2.13.0'
      paho:
        description: 'paho mqtt version'
        required: true
        type: string
        default: '2.1.0'
      pymodbus:
        description: 'pymodbus version'
        required: true
        type: string
        default: '3.6.8'

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/tf_multiarch
  UV: ${{ github.event.inputs.ubuntu_version }}

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.prepare_tag.outputs.tag }}
    steps:
      - name: prepare_tag
        run: |
          echo $${{ env.UU }}
          t0=ubuntu${{ inputs.ubuntu_version }}
          t1=_numpy${{ inputs.numpy }}
          t2=_tflite${{ inputs.tflite }}
          t3=_paho${{ inputs.paho }}
          t4=_pymodbus${{ inputs.pymodbus}}
          echo "tag=$t0$t1$t2$t3$t4" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: tag
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v7
          - linux/arm64
        folder: ["tf", "tf_armv7"]
        exclude:
          - folder: "tf"
            platform: "linux/arm/v7"
          - folder: "tf_armv7"
            platform: "linux/amd64"
          - folder: "tf_armv7"
            platform: "linux/arm64"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ needs.tag.outputs.tag }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.folder }}/.
          platforms: ${{ matrix.platform }}
          build-args: |
            "BUILD_FROM=ubuntu:${{ inputs.ubuntu_version }}"
            "PYMODBUS_VERSION=${{ inputs.pymodbus}}"
            "PAHO_VERSION=${{ inputs.paho }}"
            "NUMPY_VERSION=${{ inputs.numpy }}"
            "TFLITE_VERSION=${{ inputs.tflite }}"
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"          

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - tag
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ needs.tag.outputs.tag }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
